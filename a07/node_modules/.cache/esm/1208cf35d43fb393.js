_d43‍.x([["default",()=>_d43‍.o]]);/*
Add your code for Game here
 */
let gameState = {
    board: [],
    score: 0,
    won: false,
    over: false
}
let Game = class {
    // constructor
    constructor(board) {
        this.size = board;
        this.listeners = [];
        this.setupNewGame();
    }
    loadGame(input) {
        gameState.board = input.board;
        gameState.score = input.score;
        gameState.won = input.won;
        gameState.over = input.over;
    }
    onLose(callback) {
        this.addListener((e)=> {
            if (e == Game.Event.LOSE) {
                callback(this.gameState);
            }
        });
    }

    onWin(callback) {
        this.addListener((e)=> {
            if (e == Game.Event.WIN) {
                callback(this.gameState);
            }
        });
    }

    onMove(callback) {
        this.addListener((e)=> {
            if (e == Game.Event.MOVE) {
                callback(this.gameState);
            }
        });
    }
    updateListeners(event) {
        this.listeners.forEach((l) => l(event));
    }

    addListener(listener) {
        let idx = this.listeners.findIndex((l) => l == listener);
        if (idx == -1) {
            this.listeners.push(listener);
        }
    }

    removeListener(listener) {
        let idx = this.listeners.findIndex((l) => l == listener);
        if (idx != -1) {
            this.listeners.splice(idx, 1);
        }
    }

    getGameState() {
        return gameState;
    }
    setupNewGame() {
        gameState.score = 0;
        gameState.board = new Array(this.size * this.size).fill(0);
        //place first two tiles
        this.placeTile();
        this.placeTile();
    }
    move(direction) {
        switch (direction) {
            case 'up':
                this.moveUp(true);
                break;
            case 'down':
                this.moveDown(true);
                break;
            case 'left':
                this.moveLeft(true);
                break;
            case 'right':
                this.moveRight(true);
                break;
        }
        this.updateListeners(Game.Event.MOVE);
        this.checkLose();
        for(let i = 0; i < gameState.board.length; i++){
            if(gameState.board[i] == 0){
                gameState.over = false;
                return;
            }
        }
    }
    checkLose() {
        let counter = 0;
        for(let i = 0; i < gameState.board.length; i++){
            if(gameState.board[i] > 0) {
                counter++;
            }
        }
        console.log(gameState.board.length);
        console.log(counter);
        if(counter != (gameState.board.length)) {
            return;
        }
        let gameCopy = {
            board: gameState.board.slice(0),
            score: gameState.score,
            won: gameState.won,
            over: gameState.over
        }
        this.moveUp(false); this.moveDown(false); this.moveLeft(false); this.moveRight(false);
        if (JSON.stringify(gameCopy.board) == JSON.stringify(gameState.board)) {
            console.log("game over :(");
            gameState.over = true;
           // console.log("gamestate.score" + gameState.score);
            this.updateListeners(Game.Event.LOSE);
        } else {
            //console.log("move available, keep playing");
            this.loadGame(gameCopy);
            //console.log(gameState.score);
        }
    }
    moveUp(scoring) {

        //console.log("up");
        gameState.board = transpose(gameState.board, this.size);
        //console.log(this.toString(gameState.board));
        this.makeMoves(scoring);
        gameState.board = transpose(gameState.board, this.size);
        //console.log(this.toString(gameState.board));

    }
    moveDown(scoring) {
        //console.log("down");
        gameState.board = transpose(gameState.board, this.size);
        gameState.board = flipRow(gameState.board, this.size);
        this.makeMoves(scoring);
        gameState.board = flipRow(gameState.board, this.size);
        gameState.board = transpose(gameState.board, this.size);
       //console.log(this.toString(gameState.board));
    }
    moveLeft(scoring) {
        // console.log("left");
        this.makeMoves(scoring);
        //console.log(this.toString(gameState.board));
    }
    moveRight(scoring) {
        //console.log("right");
        gameState.board = flipRow(gameState.board, this.size);
        //console.log(this.toString(gameState.board));
        this.makeMoves(scoring);
        gameState.board = flipRow(gameState.board, this.size);
        //console.log(this.toString(gameState.board));
    }
    checkWin() {
        for (let i = 0; i < this.size ** 2; i++) {
            if (gameState.board[i] == 2048) {
                this.updateListeners(Game.Event.WIN);
            
                return true;
            }
        }
        return false;
    }
    makeMoves(scoring) {
        let forComparison = JSON.stringify(gameState.board);
        for (let i = 0; i < this.size; i++) {
            let beg = i * this.size;
            let end = (i + 1) * this.size;
            let tempRow = gameState.board.slice(beg, end);
            let shifted = filterZeros(tempRow);
            if (shifted.length == 0) continue;
            shifted.reduce((prev, curr, idx, arr) => {
                if (prev == curr) {
                    arr[idx - 1] = curr * 2;
                    arr[idx] = 0;
                    if(scoring){
                        if(curr * 2 == 2048) {
                            gameState.won = true;
                            this.updateListeners(Game.Event.WIN);
                        }
                        gameState.score += curr * 2;
                    }
                    
                }
                return arr[idx];
            });
            shifted = filterZeros(shifted);
            for (let z = 0; z < this.size; z++) {
                if (!Number.isInteger(shifted[z])) {
                    shifted[z] = 0;
                }
            }
            let x = 0;
            for (let j = beg; j < end; j++) {
                gameState.board[j] = shifted[x];
                x++;
            }
        }
        if (forComparison == JSON.stringify(gameState.board)) {
           // console.log("invalid move");
        } else {
            this.placeTile();
        //    console.log("great move");
        }
      //  console.log("current score: " +  gameState.score);
    }

    placeTile() {
        let tile = twoFour();
        let curBoard = gameState.board;
        let available = 0;
        while (available == 0) {
            let index = getRandomInt(this.size * this.size);
            if (curBoard[index] == 0) {
                curBoard[index] = tile;
                available = 1;
            }
        }
    }
    toString() {
        let boardString = '';
        for (let i = 0; i < this.size; i++) {
            for (let j = 0; j < this.size; j++) {
                boardString += "[" + gameState.board[(i * this.size) + j] + "]\t";
            }
            boardString += "\n";
        }
        console.log(boardString);
    }
    updateScore(add) {
        gameState.score += add;
    //    console.log("current score: " + gameState.score);
    }
}

Game.State = {
    INITIALIZED: 0,
    IN_PROGRESS: 1,
    LOST: 2,
    WON: 3
}

Game.Event = {
    MOVE: 0,
    WIN: 1,
    LOSE: 2
}

function twoFour() {
    let num = Math.floor(Math.random() * 10);
    if (num == 9) {
        return 4;
    } else {
        return 2;
    }
}
function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}

function transpose(arr, size) {
    let output = [];
    let x = 0;
    for (let i = 0; i < size; i++) {
        for (let j = 0; j < size; j++) {
            output[x] = arr[(j * size) + i];
            x++;
        }
    }
    return output;
}
function flipRow(arr, size) {
    let output = [];
    let x = 0;
    for (let i = 0; i < size; i++) {
        for (let j = size - 1; j >= 0; j--) {
            output[x] = arr[i * size + j];
            x++;
        }
    }
    return output;
}

function filterZeros(arr) {
    return arr.filter((num) => num !== 0);
}

_d43‍.d(Game);